import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.Map;

public class HomeScreen {
    private static JFrame frame;
    private static CardLayout cardLayout;
    private static JPanel cardPanel;
    private static Map<String, String> noteDetails = new HashMap<>();

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            initializeSampleNotes();
            initializeUI();
        });
    }

    private static void initializeSampleNotes() {
        noteDetails.put(
                "Task Management App UI Design\n28 May\nJust Now",
                "Design the UI for the new task management app.\n\n- Create wireframes\n- Choose color scheme\n- Design icons"
        );
        noteDetails.put(
                "Shopping List\n12 May\n1h ago",
                "Groceries to buy:\n\n- Milk\n- Eggs\n- Bread\n- Fruits\n- Vegetables"
        );
    }

    private static void initializeUI() {
        frame = new JFrame("My Notes App");
        frame.setSize(400, 600);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        cardLayout = new CardLayout();
        cardPanel = new JPanel(cardLayout);

        createLoginScreen();
        createHomeScreen();
        createNoteDetailScreen();

        frame.add(cardPanel);
        frame.setVisible(true);
    }

    private static void createLoginScreen() {
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new BoxLayout(loginPanel, BoxLayout.Y_AXIS));
        loginPanel.setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));

        JLabel titleLabel = new JLabel("Welcome to My Notes", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 22));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JTextField usernameField = new JTextField();
        usernameField.setBorder(BorderFactory.createTitledBorder("Username"));
        usernameField.setMaximumSize(new Dimension(300, 50));

        JPasswordField passwordField = new JPasswordField();
        passwordField.setBorder(BorderFactory.createTitledBorder("Password"));
        passwordField.setMaximumSize(new Dimension(300, 50));

        JButton loginButton = new JButton("Login");
        loginButton.setBackground(new Color(70, 130, 180));
        loginButton.setForeground(Color.WHITE);
        loginButton.setFont(new Font("Arial", Font.BOLD, 16));
        loginButton.setFocusPainted(false);
        loginButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        loginButton.setMaximumSize(new Dimension(300, 40));

        loginButton.addActionListener(e -> {
            if (usernameField.getText().trim().isEmpty() || passwordField.getPassword().length == 0) {
                JOptionPane.showMessageDialog(frame, "Please enter both username and password", "Login Error", JOptionPane.ERROR_MESSAGE);
            } else {
                cardLayout.show(cardPanel, "Home");
            }
        });

        loginPanel.add(titleLabel);
        loginPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        loginPanel.add(usernameField);
        loginPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        loginPanel.add(passwordField);
        loginPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        loginPanel.add(loginButton);

        cardPanel.add(loginPanel, "Login");
    }

    private static void createHomeScreen() {
        JPanel homePanel = new JPanel(new BorderLayout());

        JLabel titleLabel = new JLabel("Hello, My Notes", SwingConstants.LEFT);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JTextField searchField = new JTextField("Search Here");
        searchField.setPreferredSize(new Dimension(300, 30));

        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(titleLabel, BorderLayout.NORTH);
        topPanel.add(searchField, BorderLayout.SOUTH);

        DefaultListModel<String> notesModel = new DefaultListModel<>();
        noteDetails.keySet().forEach(notesModel::addElement);

        JList<String> notesList = new JList<>(notesModel);
        notesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        notesList.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        notesList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    String selectedNote = notesList.getSelectedValue();
                    if (selectedNote != null) {
                        showNoteDetail(selectedNote);
                    }
                }
            }
        });

        JScrollPane scrollPane = new JScrollPane(notesList);

        JButton logoutButton = new JButton("Logout");
        logoutButton.addActionListener(e -> cardLayout.show(cardPanel, "Login"));

        JButton addButton = new JButton("+");
        addButton.setFont(new Font("Arial", Font.BOLD, 20));
        addButton.setBackground(new Color(70, 130, 180));
        addButton.setForeground(Color.WHITE);
        addButton.setFocusPainted(false);

        addButton.addActionListener(e -> {
            String title = JOptionPane.showInputDialog(frame, "Enter note title:", "New Note", JOptionPane.PLAIN_MESSAGE);
            if (title != null && !title.trim().isEmpty()) {
                String content = JOptionPane.showInputDialog(frame, "Enter note content:", "Note Content", JOptionPane.PLAIN_MESSAGE);
                String formattedTitle = title + "\n" + java.time.LocalDate.now() + "\nJust Now";
                notesModel.addElement(formattedTitle);
                noteDetails.put(formattedTitle, content != null ? content : "");
            }
        });

        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.add(logoutButton, BorderLayout.WEST);
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(addButton);
        bottomPanel.add(buttonPanel, BorderLayout.EAST);

        homePanel.add(topPanel, BorderLayout.NORTH);
        homePanel.add(scrollPane, BorderLayout.CENTER);
        homePanel.add(bottomPanel, BorderLayout.SOUTH);

        cardPanel.add(homePanel, "Home");
    }

    private static void createNoteDetailScreen() {
        JPanel detailPanel = new JPanel(new BorderLayout());

        JButton backButton = new JButton("← Back");
        backButton.addActionListener(e -> cardLayout.show(cardPanel, "Home"));

        JTextArea noteContentArea = new JTextArea();
        noteContentArea.setEditable(false);
        noteContentArea.setLineWrap(true);
        noteContentArea.setWrapStyleWord(true);
        noteContentArea.setFont(new Font("Arial", Font.PLAIN, 16));
        noteContentArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JScrollPane contentScroll = new JScrollPane(noteContentArea);

        detailPanel.add(backButton, BorderLayout.NORTH);
        detailPanel.add(contentScroll, BorderLayout.CENTER);

        cardPanel.add(detailPanel, "NoteDetail");
    }

    private static void showNoteDetail(String noteKey) {
        Component[] components = cardPanel.getComponents();
        for (Component comp : components) {
            if (comp instanceof JPanel && cardPanel.getLayout() instanceof CardLayout) {
                JScrollPane scrollPane = (JScrollPane) ((JPanel) comp).getComponent(1);
                JTextArea area = (JTextArea) scrollPane.getViewport().getView();
                area.setText(noteDetails.getOrDefault(noteKey, "No content available"));
                break;
            }
        }
        cardLayout.show(cardPanel, "NoteDetail");
    }
}
